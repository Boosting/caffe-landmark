# train data for VGG
layer {
  name: "lmdb_data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/mnt/disk/zengjiajian/train_data_gray/VGG_percep_gray/pair1/train_lmdb_data"
    batch_size: 8
    backend: LMDB
  }
}

layer {
  name: "lmdb_landmark"
  type: "Data"
  top: "landmark"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/mnt/disk/zengjiajian/train_data_gray/VGG_percep_gray/pair1/train_lmdb_landmark"
    batch_size: 8
    backend: LMDB
  }
}

# test data for VGG
layer {
  name: "lmdb_data_test"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  data_param {
    source: "/mnt/disk/zengjiajian/train_data_gray/VGG_percep_gray/pair1/test_lmdb_data"
    batch_size: 32
    backend: LMDB
  }
}

layer {
  name: "lmdb_landmark_test"
  type: "Data"
  top: "landmark"
  include {
    phase: TEST
  }
  data_param {
    source: "/mnt/disk/zengjiajian/train_data_gray/VGG_percep_gray/pair1/test_lmdb_landmark"
    batch_size: 32
    backend: LMDB
  }
}

layer {
  name: "lmdb_eyedist_test"
  type: "Data"
  top: "eyedist"
  include {
    phase: TEST
  }
  data_param {
    source: "/mnt/disk/zengjiajian/train_data_gray/VGG_percep_gray/pair1/test_lmdb_eyedist"
    batch_size: 32
    backend: LMDB
  }
}

# network architecture
layer {
  bottom: "data"
  top: "lm_conv1_1"
  name: "lm_conv1_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv1_1"
  top: "lm_conv1_1"
  name: "lm_relu1_1"
  type: "ReLU"
}

layer {
  bottom: "lm_conv1_1"
  top: "lm_conv1_2"
  name: "lm_conv1_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv1_2"
  top: "lm_conv1_2"
  name: "lm_relu1_2"
  type: "ReLU"
}

layer {
  bottom: "lm_conv1_2"
  top: "lm_pool1"
  name: "lm_pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "lm_pool1"
  top: "lm_conv2_1"
  name: "lm_conv2_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "lm_conv2_1"
  top: "lm_conv2_1"
  name: "lm_relu2_1"
  type: "ReLU"
}

layer {
  bottom: "lm_conv2_1"
  top: "lm_conv2_2"
  name: "lm_conv2_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv2_2"
  top: "lm_conv2_2"
  name: "lm_relu2_2"
  type: "ReLU"
}

layer {
  bottom: "lm_conv2_2"
  top: "lm_pool2"
  name: "lm_pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "lm_pool2"
  top: "lm_conv3_1"
  name: "lm_conv3_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv3_1"
  top: "lm_conv3_1"
  name: "lm_relu3_1"
  type: "ReLU"
}

layer {
  bottom: "lm_conv3_1"
  top: "lm_conv3_2"
  name: "lm_conv3_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv3_2"
  top: "lm_conv3_2"
  name: "lm_relu3_2"
  type: "ReLU"
}

layer {
  bottom: "lm_conv3_2"
  top: "lm_conv3_3"
  name: "lm_conv3_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv3_3"
  top: "lm_conv3_3"
  name: "lm_relu3_3"
  type: "ReLU"
}

layer {
  bottom: "lm_conv3_3"
  top: "lm_pool3"
  name: "lm_pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "lm_pool3"
  top: "lm_conv4_1"
  name: "lm_conv4_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "lm_conv4_1"
  top: "lm_conv4_1"
  name: "lm_relu4_1"
  type: "ReLU"
}
layer {
  bottom: "lm_conv4_1"
  top: "lm_conv4_2"
  name: "lm_conv4_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "lm_conv4_2"
  top: "lm_conv4_2"
  name: "lm_relu4_2"
  type: "ReLU"
}

layer {
  bottom: "lm_conv4_2"
  top: "lm_conv4_3"
  name: "lm_conv4_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv4_3"
  top: "lm_conv4_3"
  name: "lm_relu4_3"
  type: "ReLU"
}

layer {
  bottom: "lm_conv4_3"
  top: "lm_pool4"
  name: "lm_pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "lm_pool4"
  top: "lm_conv5_1"
  name: "lm_conv5_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv5_1"
  top: "lm_conv5_1"
  name: "lm_relu5_1"
  type: "ReLU"
}

layer {
  bottom: "lm_conv5_1"
  top: "lm_conv5_2"
  name: "lm_conv5_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv5_2"
  top: "lm_conv5_2"
  name: "lm_relu5_2"
  type: "ReLU"
}

layer {
  bottom: "lm_conv5_2"
  top: "lm_conv5_3"
  name: "lm_conv5_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_conv5_3"
  top: "lm_conv5_3"
  name: "lm_relu5_3"
  type: "ReLU"
}

layer {
  bottom: "lm_conv5_3"
  top: "lm_pool5"
  name: "lm_pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "lm_pool5"
  top: "lm_fc6"
  name: "lm_fc6"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_fc6"
  top: "lm_fc6"
  name: "lm_relu6"
  type: "ReLU"
}

layer {
  bottom: "lm_fc6"
  top: "lm_fc6"
  name: "lm_drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  bottom: "lm_fc6"
  top: "lm_fc7"
  name: "lm_fc7"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  bottom: "lm_fc7"
  top: "lm_fc7"
  name: "lm_relu7"
  type: "ReLU"
}

layer {
  bottom: "lm_fc7"
  top: "lm_fc7"
  name: "lm_drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  bottom: "lm_fc7"
  top: "lm_fc8"
  name: "lm_fc8"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "performance"
  type: "FacialLandmarkPerformance"
  bottom: "lm_fc8"
  bottom: "landmark"
  bottom: "eyedist"
  top: "average_error"
  top: "false_rate"
  
  facial_landmark_performance_param {
    num_landmark: 5
    error_threshold: 0.1
  }
  include {
    phase: TEST
  }
}

layer {
  name: "euclidean_loss"
  type: "EuclideanLoss"
  bottom: "lm_fc8"
  bottom: "landmark"
  top: "euclidean_loss"
}

# Use pre-trained VGGNet (origin in image classification) to extract context information 
# around the patch formed with predicted landmark being its centre.
# Extracted context information can be used to compute the "Perceptual loss" defined.
# The net will not be updated.
######### Patch Semantic Network (VGG16) #########
layer {
  name: "channel_concat"
  type: "Concat"
  bottom: "data"
  bottom: "data"
  bottom: "data"
  top: "data_exp"
  concat_param {
    axis: 1
  }
}

layer {
  bottom: "data_exp"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}

layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}

layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}

layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}

layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}

layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}

layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}

layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}

layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}

layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}

layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}

layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}

layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# silence pool5 
layer {
  name: "silence_pool5"
  type: "Silence"
  bottom: "pool5"
}

######## patch_semantic_layer for computing partial derivatives ########
layer {
  name: "p_s_vgg16"
  type: "PatchSemantic"
  # bottom[0] here must be gt landmarks
  # while bottom[1] here must be predicted landmakrs
  # we can not exchange the order
  bottom: "landmark"
  bottom: "lm_fc8"
  bottom: "pool3"
  bottom: "conv4_3"  
  top: "partial_derivatives"
  
  patch_semantic_param {
    num_landmark: 5
    cross_channel: AVE
    image_w: 224
    image_h: 224
    patch_w: 12
    patch_h: 12
    
    # sp param of layer conv1_1
    spatial_operation_param {
      name: "conv1_1"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv1_2
    spatial_operation_param {
      name: "conv1_2"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer pool1
    spatial_operation_param {
      name: "pool1"
      kernel_size: 2
      stride: 2
      weight: 0
      used: false
    }
    # sp param of layer conv2_1
    spatial_operation_param {
      name: "conv2_1"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv2_2
    spatial_operation_param {
      name: "conv2_2"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer pool2
    spatial_operation_param {
      name: "pool2"
      kernel_size: 2
      stride: 2
      weight: 0
      used: false
    }
    # sp param of layer conv3_1
    spatial_operation_param {
      name: "conv3_1"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv3_2
    spatial_operation_param {
      name: "conv3_2"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv3_3
    spatial_operation_param {
      name: "conv3_3"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer pool3
    spatial_operation_param {
      name: "pool3"
      kernel_size: 2
      stride: 2
      weight: 1
      used: true
    }
    # sp param of layer conv4_1
    spatial_operation_param {
      name: "conv4_1"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv4_2
    spatial_operation_param {
      name: "conv4_2"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv4_3
    spatial_operation_param {
      name: "conv4_3"
      kernel_size: 3
      stride: 1
      weight: 1
      used: true
    }
    # sp param of layer pool4
    spatial_operation_param {
      name: "pool4"
      kernel_size: 2
      stride: 2
      weight: 0
      used: false
    }
    # sp param of layer conv5_1
    spatial_operation_param {
      name: "conv5_1"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv5_2
    spatial_operation_param {
      name: "conv5_2"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer conv5_3
    spatial_operation_param {
      name: "conv5_3"
      kernel_size: 3
      stride: 1
      weight: 0
      used: false
    }
    # sp param of layer pool5
    spatial_operation_param {
      name: "pool5"
      kernel_size: 2
      stride: 2
      weight: 0
      used: false
    }
  }
}

######### Eltwise layer for computing residuals #########
layer {
  name: "eltwise_sub"
  type: "Eltwise"
  bottom: "lm_fc8"
  bottom: "landmark"
  top: "residuals"
  
  eltwise_param {
    operation: SUM
	coeff: 1
	coeff: -1
  }
}

######### perceptual_loss_layer #########
layer {
  name: "perceptual_loss"
  type: "PerceptualLoss"
  bottom: "residuals"
  bottom: "partial_derivatives"
  top: "perceptual_loss"
  
  perceptual_loss_param { 
    num_landmark: 5
    epsilon: 0.001
  }
}
